{"version":3,"sources":["components/Three.js","components/Mask.js","App.js","serviceWorker.js","index.js"],"names":["window","THREE","require","Mask","scene","camera","renderer","animate","render","requestAnimationFrame","addEventListener","event","preventDefault","stopPropagation","Scene","background","Color","PerspectiveCamera","innerWidth","innerHeight","rotation","y","Math","PI","position","x","z","OrbitControls","hlight","AmbientLight","add","directionalLight","DirectionalLight","set","castShadow","light","PointLight","light2","light3","light4","WebGLRenderer","antialias","setSize","document","body","appendChild","domElement","width","height","aspect","updateProjectionMatrix","GLTFLoader","load","gltf","children","scale","xhr","console","log","concat","loaded","total","error","init","_this","this","react_default","a","createElement","ref","mount","Component","App","className","components_Mask","Boolean","location","hostname","match","ReactDOM","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.581d29d0.chunk.js","sourcesContent":["import * as THREE from 'three';\n\nwindow.THREE = THREE;\nrequire('three/examples/js/loaders/GLTFLoader');\nrequire('three/examples/js/controls/OrbitControls');\n\nexport default window.THREE;","import React, { Component } from \"react\";\nimport THREE from './Three';\n\n\nclass Mask extends Component {\n\n  componentDidMount() {\n\n    // === THREE.JS CODE START ===\n    let scene, camera, renderer;\n    const init = () => {\n      scene = new THREE.Scene();\n      scene.background = new THREE.Color(0xffffff);\n\n      camera = new THREE.PerspectiveCamera(\n        90,\n        window.innerWidth / window.innerHeight,\n        .3,\n        500\n      );\n\n      camera.rotation.y = 45 / 180 * Math.PI;\n      camera.position.x = 0;\n      camera.position.y = 1;\n      camera.position.z = 2;\n\n      let controls = new THREE.OrbitControls(camera);\n      controls.addEventListener('change', renderer);\n\n      let hlight = new THREE.AmbientLight(0xffffff, 0.5);\n      scene.add(hlight);\n\n      let directionalLight = new THREE.DirectionalLight(0xffa647, 0.5);\n      directionalLight.position.set(0, 1, 0);\n      directionalLight.castShadow = true;\n      scene.add(directionalLight);\n\n      let light = new THREE.PointLight(0xfccf9f, 0.9);\n      light.position.set(0, 30, 50);\n      scene.add(light);\n\n      let light2 = new THREE.PointLight(0xffa647, 1.2);\n      light2.position.set(50, 10, 0);\n      scene.add(light2);\n\n      let light3 = new THREE.PointLight(0xfffdfa, 1.8);\n      light3.position.set(0, 100, -500);\n      scene.add(light3);\n\n      let light4 = new THREE.PointLight(0xfffdfa, 1.8);\n      light4.position.set(-500, 300, 500);\n      scene.add(light4);\n\n      renderer = new THREE.WebGLRenderer({ antialias: true });\n      renderer.setSize(window.innerWidth * 1, window.innerHeight * 1);\n      document.body.appendChild(renderer.domElement);\n\n      window.addEventListener('resize', () => {\n          let width = window.innerWidth;\n          let height = window.innerHeight;\n          renderer.setSize( width, height );\n          camera.aspect = width / height;\n          camera.updateProjectionMatrix( );\n      } )\n\n\n      const loader = new THREE.GLTFLoader();\n      const url = \"https://raw.githubusercontent.com/lmencos/just-a-car/master/src/model/scene.gltf\";\n      loader.load(\n        url,\n        (gltf) => {\n          let mask = gltf.scene.children[0];\n          mask.scale.set(0.5, 0.5, 0.5);\n          scene.add(gltf.scene);\n          animate();\n        },\n        (xhr) => {\n          console.log(`${(xhr.loaded / xhr.total * 100)}% loaded`);\n        },\n        (error) => {\n          console.error('An error has happened', error)\n        },\n      );\n    }\n\n    let animate = () => {\n      renderer.render(scene, camera);\n      requestAnimationFrame(animate);\n    }\n\n    window.addEventListener('onMouseWheel', (event) => {\n      event.preventDefault();\n      event.stopPropagation();\n    } )\n\n    init();\n    // === THREE.JS EXAMPLE CODE END ===\n\n  }\n\n  render() {\n    return (\n      <div>\n        <h2>I am an ancient mexican mask coming from Three js</h2>\n        <small>Object: gltf made in Blender 2.8  </small>\n        <small>  Author: Daniel Cabrera </small>\n        <div ref={ref => (this.mount = ref)} />\n      </div>\n    )\n  }\n}\nexport default Mask;","import React, { Component } from 'react';\nimport './App.css';\nimport Mask from './components/Mask';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <h3>I am App from React 16.8.6</h3>\n\n        <div className=\"Mask\">\n          <Mask />\n        </div>\n        \n        <small>App made by Luis Mencos</small>\n        <p>\n        <small>support: Alexander Solovyeb</small>\n        </p>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n\nReactDOM.render(\n  \n  \n<App />,\n\n\ndocument.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}